# Para instalar, checar
# https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
# remove.packages("rstan")
# if (file.exists(".RData")) file.remove(".RData")

# install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)

library("rstan")

# example(stan_model, package = "rstan", run.dontrun = TRUE)  #verify your installation

options(mc.cores = parallel::detectCores())     #tiene problemas con el antivirus
#options(mc.cores = 1)

rstan_options(auto_write = TRUE)

# Ejemplo SIR -----------------------------------------------------------------

# Creamos Datos
library(deSolve)

# Solver del modelo SIR determinista
SIR_model<-function(theta,t=tiempos){
  SIRmod <- function(t, x, theta) { 
    with(as.list(c(theta, x)), 
         { 
           dS <- -bet*S*I/N 
           dI <- bet*S*I/N-gam*I
           dR <- gam*I
           res <- c(dS, dI, dR) 
           list(res) 
          }
    ) }
  ## Solver
  out <- lsoda(X_ini, t, SIRmod, theta)
  out[which(out[,3]<0),3]<-0
  return(out)
}

# Condiciones iniciales

N <- 3.e6  #pop_size

I_0 <- 2.0
S_0 <- N-I_0
R_0 <- 0

X_ini = c(S = S_0, I = I_0, R = R_0)


# Verdaderos de los par'ametros
gamma_par = 1 / 6.0
beta_par = 1.5*gamma_par
theta=c(bet=beta_par, gam=gamma_par)

#tiempos del cual observar la soluci'on del sistema
t_length = 300
grid_size = 301
t_vec = seq(0, 300, by=1)

res<-SIR_model(theta,t_vec)

head(res)

#Plot epidemic curves
par(mar=c(5,5,5,1))
matplot(res[,1],res[,-1],t="l",lwd=2,xlab="Time",ylab="Counts")
legend("topright",c("S","I","R"),col=1:3,lty=1:3,lwd=2)


# We obtain the number of new cases each day
W=res[1:grid_size-1, 2] - res[2:grid_size, 2]

plot(res[-1,1],W,pch=19,col="blue",xlab="time",ylab="",main="Number of New Cases")


# We add noise
set.seed(123)

library("MASS")
?rnegbin
pp <- 0.01
y <- rnegbin(n=length(W),mu=W,theta=W*pp*(pp+1))

plot(res[-1,1],W,pch=19,col="blue",xlab="days",ylab="",main="Number of New Cases")
lines(res[-1,1],y,t="p",pch=19,col="orange")
legend("topright",c("W(n)","y(n)"),col=c("blue","orange"),pch=19)

# we graph the prior

?rgamma
plot(x<-seq(0,20,length=100),dgamma(x,shape=1.5,scale=10/5),t="l",col="blue")

# Preparamos Datos

SIR_data = list(n_obs = length(t_vec)-1,
                y = y,
                x0 = X_ini,
                t0 = -0.000001,
                ts = t_vec
               )

fit <- stan(file = 'SIR_2.stan', data = SIR_data, chains = 1, iter = 1000,
            verbose = TRUE, init = c(0.3,0.1,0.1))

#save(fit,  file = "out_Stan_SIR.RData")
#save(fit,  file = "out_Stan_SIR2.RData")
#load("out_Stan_SIR2.RData")

print(fit)
plot(fit)
pairs(fit, pars = c("theta", "lp__"))

la <- extract(fit, permuted = TRUE) # return a list of arrays 
plot(la$theta[,1],t="l")  #beta
plot(la$theta[,2],t="l")  #gamma

### return an array of three dimensions: iterations, chains, parameters 
#a <- extract(fit, permuted = FALSE) 

### use S3 functions on stanfit objects
#a2 <- as.array(fit)
#m <- as.matrix(fit)
#d <- as.data.frame(fit)

#plot(a[1,1,])

#plot(fit@sim$samples[[1]]$theta[1])


#install.packages("bayesplot")  #https://mc-stan.org/bayesplot/

library("bayesplot")
library("rstanarm")
library("ggplot2")  #R Graphics Cookbook: https://r-graphics.org

posterior <- extract(fit, inc_warmup = TRUE, permuted = FALSE)

color_scheme_set("mix-blue-pink")
p <- mcmc_trace(fit,  pars = c("theta[1]","theta[2]"), n_warmup = 100,
                facet_args = list(nrow = 2, labeller = label_parsed))
p + facet_text(size = 15)


posterior <- as.matrix(fit)

plot_title <- ggtitle("Posterior distributions",
                      "with medians and 80% intervals")
mcmc_areas(posterior,
           pars = c("theta[1]", "theta[2]"),
           prob = 0.8) + plot_title


color_scheme_set("red")

matplot(posterior[,c('theta[1]','theta[2]')],t="l",lty=1)

#--Ejemplo 2----------------#####################################################


# Creamos Datos
library(deSolve)

# Solver del modelo SIR determinista
ejem_model<-function(theta,t=tiempos){
  mod <- function(t, x, theta) { 
    with(as.list(c(theta, x)), 
         { 
           dA <- B 
           dB <- -A-theta*B
           res <- c(dA, dB) 
           list(res) 
         }
    ) }
  ## Solver
  out <- lsoda(X_ini, t, mod, theta)
  out[which(out[,3]<0),3]<-0
  return(out)
}

# Condiciones iniciales
A0 <- 1.0
B0 <- 1.0
X_0 = c(A = A0, B = B0)

# Verdaderos de los par'ametros
theta=0.5

#tiempos del cual observar la soluci'on del sistema
t_length = 300
grid_size = 301
t_vec = seq(0, 300, by=1)

res<-ejem_model(theta,t_vec)

zz<-res[,2:3]

ejem1_data = list(T=dim(zz)[1],
                y=zz,
                t0=-0.000001,
                ts=t_vec
)

fit <- stan(file = 'ejem1.stan', data = ejem1_data, chains = 1, iter = 1000,
            verbose = TRUE, init = c(0.3,0.3,0.3))
